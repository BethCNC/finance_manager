---
alwaysApply: true
---

# Finance Manager - Claude Code Instructions

## Project Overview

A modern AI-powered financial dashboard built with React, TypeScript, and Tailwind CSS. Data syncs in real-time from Notion databases via Vercel serverless functions.

**Tech Stack:**
- Frontend: React 18 + TypeScript
- Styling: Tailwind CSS (utility-first, no custom CSS)
- Icons: Lucide React
- API: Vercel Serverless Functions (Node.js)
- Data Source: Notion API (@notionhq/client)
- Deployment: Vercel

## Architecture Principles

### Data Flow
```
Notion Databases → API Layer (/api/notion.ts) → React Hook (useFinanceData) → UI Components
```

**Key Points:**
- Never expose Notion API keys in frontend code
- All Notion queries happen server-side in `/api/notion.ts`
- Frontend fetches from `/api/notion?type=transactions` or `/api/notion?type=summary`
- Auto-refresh every 30 seconds via `setInterval` in hooks

### Notion Database Structure

**Three Connected Databases:**

1. **Incomes** (ID: `18986edc-ae2c-81b8-8f77-e19036368d99`)
   - Properties: Name (title), Amount (number), Date (date), Months (relation)
   - Represents income transactions

2. **Expenses** (ID: `18986edc-ae2c-815f-b56c-ed1964dccaf5`)
   - Properties: Name (title), Amount (number), Date (date), Months (relation)
   - Represents expense transactions

3. **Months** (ID: `18986edc-ae2c-81ca-a41c-cde295ea544f`)
   - Properties: Name (title), Date (date), Incomes Amount (rollup), Expenses amount (rollup), Profite (formula)
   - Aggregates monthly financial data

**Important:** These IDs are hardcoded in `api/notion.ts`. Do not change them.

## Code Style Conventions

### TypeScript & React

**Always follow these rules:**

1. **Arrow Functions** - Always use parentheses around parameters:
   ```typescript
   // ✅ Correct
   const handleClick = (event) => {...}
   const MyComponent = ({title, value}) => {...}
   
   // ❌ Wrong
   const handleClick = event => {...}
   const MyComponent = {title, value} => {...}
   ```

2. **Object Braces** - Minimal spaces inside braces:
   ```typescript
   // ✅ Correct
   const data = {name, amount, date}
   const {transactions, loading} = useFinanceData()
   
   // ❌ Wrong
   const data = { name, amount, date }
   const { transactions, loading } = useFinanceData()
   ```

3. **Component Structure** - Functional components only:
   ```typescript
   const ComponentName = ({prop1, prop2}: Props) => {
     // Hooks first
     const [state, setState] = useState()
     
     // Handler functions
     const handleAction = () => {...}
     
     // Render
     return <div>...</div>
   }
   ```

4. **TypeScript** - Always define interfaces for props and data:
   ```typescript
   interface Transaction {
     id: string;
     name: string;
     amount: number;
     date: string;
     type: 'income' | 'expense';
     category: string;
   }
   ```

### Tailwind CSS Patterns

**Design System:**
- Background: `bg-gray-50` (main canvas)
- Cards: `bg-white` with `border border-gray-200`
- Text: `text-black` (headings), `text-gray-700` (body), `text-gray-500` (metadata)
- Accents: `bg-black`, `text-white` for primary actions
- Hover: `hover:bg-gray-100`, `hover:border-black`
- Spacing: Use `gap-6`, `p-6`, `space-y-4` for consistency
- Rounded: `rounded-xl` for cards, `rounded-lg` for buttons

**Component Patterns:**

```typescript
// Card with hover effect
<div className="bg-white border border-gray-200 rounded-2xl p-6 hover:border-black transition-all">

// Primary button
<button className="bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-all">

// Icon container
<div className="p-3 bg-gray-50 rounded-xl">
  <Icon size={24} className="text-black" />
</div>
```

**Never:**
- Use inline styles (`style={{...}}`)
- Create custom CSS files
- Use `!important`
- Mix Tailwind with CSS modules

## API Development Guidelines

### Notion API Patterns

**Query Structure:**
```typescript
const response = await notion.databases.query({
  database_id: DATABASE_ID,
  sorts: [{property: 'Date', direction: 'descending'}],
  page_size: 20,
  filter: {...} // optional
});
```

**Accessing Properties:**
```typescript
// Title property
page.properties.Name?.title[0]?.plain_text || 'Untitled'

// Number property
page.properties.Amount?.number || 0

// Date property
page.properties.Date?.date?.start || ''

// Select property
page.properties.Type?.select?.name || ''

// Rollup property (from Months database)
page.properties['Incomes Amount']?.rollup?.number || 0

// Formula property (from Months database)
page.properties['Profite']?.formula?.number || 0
```

**Error Handling:**
```typescript
try {
  const response = await notion.databases.query({...});
  // Process response
} catch (error: any) {
  console.error('Notion API error:', error);
  return res.status(500).json({
    error: 'Failed to fetch data from Notion',
    details: error.message
  });
}
```

### API Endpoint Conventions

**File:** `/api/notion.ts`

**Query Parameters:**
- `?type=transactions` - Returns combined income/expense list
- `?type=summary` - Returns aggregated monthly totals

**Response Format:**
```typescript
// Transactions endpoint
{
  transactions: Array<{
    id: string;
    name: string;
    amount: number; // negative for expenses, positive for income
    date: string; // ISO format
    type: 'income' | 'expense';
    category: string;
  }>
}

// Summary endpoint
{
  totalIncome: number;
  totalExpenses: number;
  profit: number;
}
```

**CORS Headers:**
Always include in API responses:
```typescript
res.setHeader('Access-Control-Allow-Credentials', 'true');
res.setHeader('Access-Control-Allow-Origin', '*');
res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
```

## React Patterns & Best Practices

### Custom Hooks

**Location:** `src/hooks/`

**Pattern:**
```typescript
export const useFeatureName = () => {
  const [data, setData] = useState<Type>(initialValue);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch logic
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    
    // Cleanup if needed
    return () => {...};
  }, [dependencies]);

  return {data, loading};
};
```

### Component Organization

**File Structure:**
```
src/
├── components/
│   ├── FinancialDashboard.tsx  (main container)
│   ├── MetricCard.tsx           (reusable components)
│   └── TransactionList.tsx
├── hooks/
│   └── useFinanceData.ts
├── types/
│   └── index.ts                 (shared types)
└── utils/
    └── helpers.ts               (utility functions)
```

**Component Responsibilities:**
- Container components manage state and data fetching
- Presentational components receive props and render UI
- Keep components under 200 lines—split when larger

### State Management

**Current Approach:** React hooks + local state

**When to use useState:**
- UI state (active screen, modal open/closed)
- Form inputs
- Toggle states

**When to use useEffect:**
- Data fetching
- Setting up intervals/timeouts
- Event listeners

**Example:**
```typescript
const [activeScreen, setActiveScreen] = useState('dashboard');
const [showAIChat, setShowAIChat] = useState(false);
const {transactions, summary, loading} = useFinanceData();
```

## Common Tasks & Patterns

### Adding a New Screen

1. Create screen component function inside `FinancialDashboard.tsx`:
```typescript
const NewScreen = () => (
  <div className="space-y-6">
    <div>
      <h1 className="text-4xl font-bold text-black mb-2">Screen Title</h1>
      <p className="text-gray-500">Description</p>
    </div>
    {/* Content */}
  </div>
);
```

2. Add navigation button:
```typescript
<NavButton screen="newscreen" icon={IconName} label="New Screen" />
```

3. Add to main content renderer:
```typescript
{activeScreen === 'newscreen' && <NewScreen />}
```

### Adding a New API Endpoint

1. Add case in `api/notion.ts`:
```typescript
if (type === 'newtype') {
  const response = await notion.databases.query({
    database_id: DATABASE_ID,
    // query config
  });
  
  return res.status(200).json({data: processedData});
}
```

2. Update hook to fetch new data:
```typescript
const newDataRes = await fetch('/api/notion?type=newtype');
const newData = await newDataRes.json();
```

### Adding Transaction Creation

**Steps:**
1. Create modal component with form
2. POST to new API endpoint: `/api/notion/create`
3. Use `notion.pages.create()` to add to database:
```typescript
await notion.pages.create({
  parent: {database_id: EXPENSES_DB},
  properties: {
    Name: {title: [{text: {content: name}}]},
    Amount: {number: amount},
    Date: {date: {start: date}}
  }
});
```
4. Refresh data after creation

## Environment & Deployment

### Local Development

**Start dev server:**
```bash
npm start  # React app only (API won't work)
# OR
vercel dev  # Full stack with API functions
```

**Environment Variables:**
- File: `.env.local`
- Required: `NOTION_API_KEY=secret_xxx`
- Never commit this file

### Vercel Deployment

**Deploy command:**
```bash
vercel --prod
```

**Environment variables in Vercel:**
```bash
vercel env add NOTION_API_KEY
```

**Build configuration:**
- Build command: `npm run build`
- Output directory: `build`
- API functions: `/api` directory (auto-detected)

## Testing & Debugging

### Local Testing

**Check API response:**
```bash
# With vercel dev running
curl "http://localhost:3000/api/notion?type=transactions"
curl "http://localhost:3000/api/notion?type=summary"
```

**Debug Notion API:**
```typescript
console.log('Response:', JSON.stringify(response, null, 2));
console.log('Properties:', response.results[0]?.properties);
```

### Common Issues & Solutions

**Issue: "Failed to fetch data from Notion"**
- Check `.env.local` has correct API key
- Verify integration is connected to Notion page
- Check database IDs match exactly

**Issue: "API returns empty data"**
- Ensure Notion databases have entries
- Check property names match exactly (case-sensitive)
- Verify date sorting direction

**Issue: "CORS errors"**
- Confirm CORS headers in API response
- Check API endpoint URL is correct
- Use `vercel dev` for local testing

**Issue: "Type errors"**
- Run `npm install @types/node --save-dev`
- Check all interfaces are defined
- Verify Notion property access patterns

## AI Integration (Future)

### Planned Features

**AI Chat Assistant:**
- Use Claude API for conversational insights
- Analyze spending patterns
- Provide budget recommendations

**Implementation Pattern:**
```typescript
// New API endpoint: /api/ai-chat
const response = await fetch('https://api.anthropic.com/v1/messages', {
  method: 'POST',
  headers: {
    'x-api-key': process.env.CLAUDE_API_KEY,
    'anthropic-version': '2023-06-01',
    'content-type': 'application/json'
  },
  body: JSON.stringify({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 1024,
    messages: [{
      role: 'user',
      content: `Analyze this financial data: ${JSON.stringify(summary)}`
    }]
  })
});
```

## Security Best Practices

**Critical Rules:**

1. **Never expose API keys in frontend code**
   - All secrets in `.env.local`
   - Access only in `/api` directory (server-side)

2. **Validate all inputs**
   - Sanitize user inputs before Notion queries
   - Type-check API responses

3. **Rate limiting**
   - Implement request throttling in API
   - Cache Notion responses when possible

4. **Error handling**
   - Never expose internal errors to frontend
   - Log errors server-side only
   - Return generic error messages

## Performance Optimization

### Current Optimizations

- Auto-refresh limited to 30 seconds
- Page size limited to 20 transactions
- Parallel Promise.all() for multiple queries
- Conditional rendering based on loading state

### Future Optimizations

**Implement caching:**
```typescript
// In API function
const CACHE_DURATION = 60000; // 1 minute
let cachedData: any = null;
let lastFetch = 0;

if (Date.now() - lastFetch < CACHE_DURATION && cachedData) {
  return res.status(200).json(cachedData);
}
```

**Pagination:**
```typescript
const {page = 1, limit = 20} = req.query;
const response = await notion.databases.query({
  database_id: DB_ID,
  page_size: limit,
  start_cursor: getStartCursor(page)
});
```

## Git Workflow

**Branch Strategy:**
- `main` - production-ready code
- `develop` - integration branch
- `feature/*` - new features
- `fix/*` - bug fixes

**Commit Messages:**
```
feat: add transaction creation modal
fix: resolve Notion API type error
refactor: extract MetricCard component
docs: update API documentation
```

**Before Committing:**
1. Run `npm run build` to check for TypeScript errors
2. Test all modified endpoints
3. Update README if needed

## Quick Reference

### File Locations
- API functions: `/api/*.ts`
- React components: `/src/components/*.tsx`
- Custom hooks: `/src/hooks/*.ts`
- Types: TypeScript interfaces in component files or `/src/types/`
- Styles: Tailwind classes only (no CSS files)

### Key Dependencies
- `@notionhq/client` - Notion SDK
- `lucide-react` - Icon library
- `@vercel/node` - Vercel types

### Important URLs
- Notion Integrations: https://www.notion.so/my-integrations
- Finance Tracker: https://www.notion.so/Finance-Tracker-18986edcae2c81b7a212cce615e18010
- Vercel Dashboard: https://vercel.com/dashboard

### Database IDs
```typescript
const INCOMES_DB = '18986edc-ae2c-81b8-8f77-e19036368d99';
const EXPENSES_DB = '18986edc-ae2c-815f-b56c-ed1964dccaf5';
const MONTHS_DB = '18986edc-ae2c-81ca-a41c-cde295ea544f';
```

## Decision Framework

**When adding features, ask:**

1. **Does this require new Notion data?**
   - Yes → Create new API endpoint in `/api/notion.ts`
   - No → Use existing hooks

2. **Is this a reusable component?**
   - Yes → Extract to `/src/components/ComponentName.tsx`
   - No → Keep inline in parent component

3. **Does this need state?**
   - UI-only → `useState` in component
   - Data fetching → Create custom hook in `/src/hooks/`
   - Complex logic → Consider context or state management

4. **Should this be styled differently?**
   - Follow existing Tailwind patterns
   - Never create custom CSS
   - Extract repeated patterns into reusable components

## Success Criteria

**Code Quality Checklist:**
- [ ] TypeScript has no errors (`npm run build` succeeds)
- [ ] All arrow functions use parentheses around parameters
- [ ] Object destructuring has minimal spaces in braces
- [ ] Tailwind classes follow design system
- [ ] No inline styles or custom CSS
- [ ] API responses have proper error handling
- [ ] Environment variables never exposed in frontend
- [ ] Components are under 200 lines
- [ ] Loading states handled appropriately
- [ ] All Notion property accesses have fallbacks (`|| defaultValue`)

---

**Remember:** This project prioritizes clarity, type safety, and maintainability. When in doubt, follow the patterns already established in the codebase.
# Finance Manager - Claude Code Instructions

## Project Overview

A modern AI-powered financial dashboard built with React, TypeScript, and Tailwind CSS. Data syncs in real-time from Notion databases via Vercel serverless functions.

**Tech Stack:**
- Frontend: React 18 + TypeScript
- Styling: Tailwind CSS (utility-first, no custom CSS)
- Icons: Lucide React
- API: Vercel Serverless Functions (Node.js)
- Data Source: Notion API (@notionhq/client)
- Deployment: Vercel

## Architecture Principles

### Data Flow
```
Notion Databases → API Layer (/api/notion.ts) → React Hook (useFinanceData) → UI Components
```

**Key Points:**
- Never expose Notion API keys in frontend code
- All Notion queries happen server-side in `/api/notion.ts`
- Frontend fetches from `/api/notion?type=transactions` or `/api/notion?type=summary`
- Auto-refresh every 30 seconds via `setInterval` in hooks

### Notion Database Structure

**Three Connected Databases:**

1. **Incomes** (ID: `18986edc-ae2c-81b8-8f77-e19036368d99`)
   - Properties: Name (title), Amount (number), Date (date), Months (relation)
   - Represents income transactions

2. **Expenses** (ID: `18986edc-ae2c-815f-b56c-ed1964dccaf5`)
   - Properties: Name (title), Amount (number), Date (date), Months (relation)
   - Represents expense transactions

3. **Months** (ID: `18986edc-ae2c-81ca-a41c-cde295ea544f`)
   - Properties: Name (title), Date (date), Incomes Amount (rollup), Expenses amount (rollup), Profite (formula)
   - Aggregates monthly financial data

**Important:** These IDs are hardcoded in `api/notion.ts`. Do not change them.

## Code Style Conventions

### TypeScript & React

**Always follow these rules:**

1. **Arrow Functions** - Always use parentheses around parameters:
   ```typescript
   // ✅ Correct
   const handleClick = (event) => {...}
   const MyComponent = ({title, value}) => {...}
   
   // ❌ Wrong
   const handleClick = event => {...}
   const MyComponent = {title, value} => {...}
   ```

2. **Object Braces** - Minimal spaces inside braces:
   ```typescript
   // ✅ Correct
   const data = {name, amount, date}
   const {transactions, loading} = useFinanceData()
   
   // ❌ Wrong
   const data = { name, amount, date }
   const { transactions, loading } = useFinanceData()
   ```

3. **Component Structure** - Functional components only:
   ```typescript
   const ComponentName = ({prop1, prop2}: Props) => {
     // Hooks first
     const [state, setState] = useState()
     
     // Handler functions
     const handleAction = () => {...}
     
     // Render
     return <div>...</div>
   }
   ```

4. **TypeScript** - Always define interfaces for props and data:
   ```typescript
   interface Transaction {
     id: string;
     name: string;
     amount: number;
     date: string;
     type: 'income' | 'expense';
     category: string;
   }
   ```

### Tailwind CSS Patterns

**Design System:**
- Background: `bg-gray-50` (main canvas)
- Cards: `bg-white` with `border border-gray-200`
- Text: `text-black` (headings), `text-gray-700` (body), `text-gray-500` (metadata)
- Accents: `bg-black`, `text-white` for primary actions
- Hover: `hover:bg-gray-100`, `hover:border-black`
- Spacing: Use `gap-6`, `p-6`, `space-y-4` for consistency
- Rounded: `rounded-xl` for cards, `rounded-lg` for buttons

**Component Patterns:**

```typescript
// Card with hover effect
<div className="bg-white border border-gray-200 rounded-2xl p-6 hover:border-black transition-all">

// Primary button
<button className="bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-all">

// Icon container
<div className="p-3 bg-gray-50 rounded-xl">
  <Icon size={24} className="text-black" />
</div>
```

**Never:**
- Use inline styles (`style={{...}}`)
- Create custom CSS files
- Use `!important`
- Mix Tailwind with CSS modules

## API Development Guidelines

### Notion API Patterns

**Query Structure:**
```typescript
const response = await notion.databases.query({
  database_id: DATABASE_ID,
  sorts: [{property: 'Date', direction: 'descending'}],
  page_size: 20,
  filter: {...} // optional
});
```

**Accessing Properties:**
```typescript
// Title property
page.properties.Name?.title[0]?.plain_text || 'Untitled'

// Number property
page.properties.Amount?.number || 0

// Date property
page.properties.Date?.date?.start || ''

// Select property
page.properties.Type?.select?.name || ''

// Rollup property (from Months database)
page.properties['Incomes Amount']?.rollup?.number || 0

// Formula property (from Months database)
page.properties['Profite']?.formula?.number || 0
```

**Error Handling:**
```typescript
try {
  const response = await notion.databases.query({...});
  // Process response
} catch (error: any) {
  console.error('Notion API error:', error);
  return res.status(500).json({
    error: 'Failed to fetch data from Notion',
    details: error.message
  });
}
```

### API Endpoint Conventions

**File:** `/api/notion.ts`

**Query Parameters:**
- `?type=transactions` - Returns combined income/expense list
- `?type=summary` - Returns aggregated monthly totals

**Response Format:**
```typescript
// Transactions endpoint
{
  transactions: Array<{
    id: string;
    name: string;
    amount: number; // negative for expenses, positive for income
    date: string; // ISO format
    type: 'income' | 'expense';
    category: string;
  }>
}

// Summary endpoint
{
  totalIncome: number;
  totalExpenses: number;
  profit: number;
}
```

**CORS Headers:**
Always include in API responses:
```typescript
res.setHeader('Access-Control-Allow-Credentials', 'true');
res.setHeader('Access-Control-Allow-Origin', '*');
res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
```

## React Patterns & Best Practices

### Custom Hooks

**Location:** `src/hooks/`

**Pattern:**
```typescript
export const useFeatureName = () => {
  const [data, setData] = useState<Type>(initialValue);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch logic
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    
    // Cleanup if needed
    return () => {...};
  }, [dependencies]);

  return {data, loading};
};
```

### Component Organization

**File Structure:**
```
src/
├── components/
│   ├── FinancialDashboard.tsx  (main container)
│   ├── MetricCard.tsx           (reusable components)
│   └── TransactionList.tsx
├── hooks/
│   └── useFinanceData.ts
├── types/
│   └── index.ts                 (shared types)
└── utils/
    └── helpers.ts               (utility functions)
```

**Component Responsibilities:**
- Container components manage state and data fetching
- Presentational components receive props and render UI
- Keep components under 200 lines—split when larger

### State Management

**Current Approach:** React hooks + local state

**When to use useState:**
- UI state (active screen, modal open/closed)
- Form inputs
- Toggle states

**When to use useEffect:**
- Data fetching
- Setting up intervals/timeouts
- Event listeners

**Example:**
```typescript
const [activeScreen, setActiveScreen] = useState('dashboard');
const [showAIChat, setShowAIChat] = useState(false);
const {transactions, summary, loading} = useFinanceData();
```

## Common Tasks & Patterns

### Adding a New Screen

1. Create screen component function inside `FinancialDashboard.tsx`:
```typescript
const NewScreen = () => (
  <div className="space-y-6">
    <div>
      <h1 className="text-4xl font-bold text-black mb-2">Screen Title</h1>
      <p className="text-gray-500">Description</p>
    </div>
    {/* Content */}
  </div>
);
```

2. Add navigation button:
```typescript
<NavButton screen="newscreen" icon={IconName} label="New Screen" />
```

3. Add to main content renderer:
```typescript
{activeScreen === 'newscreen' && <NewScreen />}
```

### Adding a New API Endpoint

1. Add case in `api/notion.ts`:
```typescript
if (type === 'newtype') {
  const response = await notion.databases.query({
    database_id: DATABASE_ID,
    // query config
  });
  
  return res.status(200).json({data: processedData});
}
```

2. Update hook to fetch new data:
```typescript
const newDataRes = await fetch('/api/notion?type=newtype');
const newData = await newDataRes.json();
```

### Adding Transaction Creation

**Steps:**
1. Create modal component with form
2. POST to new API endpoint: `/api/notion/create`
3. Use `notion.pages.create()` to add to database:
```typescript
await notion.pages.create({
  parent: {database_id: EXPENSES_DB},
  properties: {
    Name: {title: [{text: {content: name}}]},
    Amount: {number: amount},
    Date: {date: {start: date}}
  }
});
```
4. Refresh data after creation

## Environment & Deployment

### Local Development

**Start dev server:**
```bash
npm start  # React app only (API won't work)
# OR
vercel dev  # Full stack with API functions
```

**Environment Variables:**
- File: `.env.local`
- Required: `NOTION_API_KEY=secret_xxx`
- Never commit this file

### Vercel Deployment

**Deploy command:**
```bash
vercel --prod
```

**Environment variables in Vercel:**
```bash
vercel env add NOTION_API_KEY
```

**Build configuration:**
- Build command: `npm run build`
- Output directory: `build`
- API functions: `/api` directory (auto-detected)

## Testing & Debugging

### Local Testing

**Check API response:**
```bash
# With vercel dev running
curl "http://localhost:3000/api/notion?type=transactions"
curl "http://localhost:3000/api/notion?type=summary"
```

**Debug Notion API:**
```typescript
console.log('Response:', JSON.stringify(response, null, 2));
console.log('Properties:', response.results[0]?.properties);
```

### Common Issues & Solutions

**Issue: "Failed to fetch data from Notion"**
- Check `.env.local` has correct API key
- Verify integration is connected to Notion page
- Check database IDs match exactly

**Issue: "API returns empty data"**
- Ensure Notion databases have entries
- Check property names match exactly (case-sensitive)
- Verify date sorting direction

**Issue: "CORS errors"**
- Confirm CORS headers in API response
- Check API endpoint URL is correct
- Use `vercel dev` for local testing

**Issue: "Type errors"**
- Run `npm install @types/node --save-dev`
- Check all interfaces are defined
- Verify Notion property access patterns

## AI Integration (Future)

### Planned Features

**AI Chat Assistant:**
- Use Claude API for conversational insights
- Analyze spending patterns
- Provide budget recommendations

**Implementation Pattern:**
```typescript
// New API endpoint: /api/ai-chat
const response = await fetch('https://api.anthropic.com/v1/messages', {
  method: 'POST',
  headers: {
    'x-api-key': process.env.CLAUDE_API_KEY,
    'anthropic-version': '2023-06-01',
    'content-type': 'application/json'
  },
  body: JSON.stringify({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 1024,
    messages: [{
      role: 'user',
      content: `Analyze this financial data: ${JSON.stringify(summary)}`
    }]
  })
});
```

## Security Best Practices

**Critical Rules:**

1. **Never expose API keys in frontend code**
   - All secrets in `.env.local`
   - Access only in `/api` directory (server-side)

2. **Validate all inputs**
   - Sanitize user inputs before Notion queries
   - Type-check API responses

3. **Rate limiting**
   - Implement request throttling in API
   - Cache Notion responses when possible

4. **Error handling**
   - Never expose internal errors to frontend
   - Log errors server-side only
   - Return generic error messages

## Performance Optimization

### Current Optimizations

- Auto-refresh limited to 30 seconds
- Page size limited to 20 transactions
- Parallel Promise.all() for multiple queries
- Conditional rendering based on loading state

### Future Optimizations

**Implement caching:**
```typescript
// In API function
const CACHE_DURATION = 60000; // 1 minute
let cachedData: any = null;
let lastFetch = 0;

if (Date.now() - lastFetch < CACHE_DURATION && cachedData) {
  return res.status(200).json(cachedData);
}
```

**Pagination:**
```typescript
const {page = 1, limit = 20} = req.query;
const response = await notion.databases.query({
  database_id: DB_ID,
  page_size: limit,
  start_cursor: getStartCursor(page)
});
```

## Git Workflow

**Branch Strategy:**
- `main` - production-ready code
- `develop` - integration branch
- `feature/*` - new features
- `fix/*` - bug fixes

**Commit Messages:**
```
feat: add transaction creation modal
fix: resolve Notion API type error
refactor: extract MetricCard component
docs: update API documentation
```

**Before Committing:**
1. Run `npm run build` to check for TypeScript errors
2. Test all modified endpoints
3. Update README if needed

## Quick Reference

### File Locations
- API functions: `/api/*.ts`
- React components: `/src/components/*.tsx`
- Custom hooks: `/src/hooks/*.ts`
- Types: TypeScript interfaces in component files or `/src/types/`
- Styles: Tailwind classes only (no CSS files)

### Key Dependencies
- `@notionhq/client` - Notion SDK
- `lucide-react` - Icon library
- `@vercel/node` - Vercel types

### Important URLs
- Notion Integrations: https://www.notion.so/my-integrations
- Finance Tracker: https://www.notion.so/Finance-Tracker-18986edcae2c81b7a212cce615e18010
- Vercel Dashboard: https://vercel.com/dashboard

### Database IDs
```typescript
const INCOMES_DB = '18986edc-ae2c-81b8-8f77-e19036368d99';
const EXPENSES_DB = '18986edc-ae2c-815f-b56c-ed1964dccaf5';
const MONTHS_DB = '18986edc-ae2c-81ca-a41c-cde295ea544f';
```

## Decision Framework

**When adding features, ask:**

1. **Does this require new Notion data?**
   - Yes → Create new API endpoint in `/api/notion.ts`
   - No → Use existing hooks

2. **Is this a reusable component?**
   - Yes → Extract to `/src/components/ComponentName.tsx`
   - No → Keep inline in parent component

3. **Does this need state?**
   - UI-only → `useState` in component
   - Data fetching → Create custom hook in `/src/hooks/`
   - Complex logic → Consider context or state management

4. **Should this be styled differently?**
   - Follow existing Tailwind patterns
   - Never create custom CSS
   - Extract repeated patterns into reusable components

## Success Criteria

**Code Quality Checklist:**
- [ ] TypeScript has no errors (`npm run build` succeeds)
- [ ] All arrow functions use parentheses around parameters
- [ ] Object destructuring has minimal spaces in braces
- [ ] Tailwind classes follow design system
- [ ] No inline styles or custom CSS
- [ ] API responses have proper error handling
- [ ] Environment variables never exposed in frontend
- [ ] Components are under 200 lines
- [ ] Loading states handled appropriately
- [ ] All Notion property accesses have fallbacks (`|| defaultValue`)

---

**Remember:** This project prioritizes clarity, type safety, and maintainability. When in doubt, follow the patterns already established in the codebase.
